import sys
import KSR as KSR  # Biblioteca Kamailio para Python

# Função auxiliar para listar atributos e métodos de um objeto
def dumpObj(obj):  
   """Lista todos os atributos e métodos de um objeto"""
   for attr in dir(obj):
       KSR.info("obj attr = %s" % attr)
       if (attr != "Status"):
           KSR.info(" type = %s\n" % type(getattr(obj, attr)))
       else:
           KSR.info("\n")
   return 1

# Função de inicialização do módulo
def mod_init():
   """Função de inicialização do módulo Kamailio"""
   KSR.info("===== from Python mod init\n")
   return kamailio()

# Classe principal do módulo Kamailio
class kamailio:
   def __init__(self):
       """Inicializa a classe principal Kamailio"""
       KSR.info('===== kamailio.__init__\n')
       self.statusInfo = {}  # Dicionário para status dos usuários
       self.kpi_data = {     # Indicadores de desempenho (KPIs)
           "auto_answered_calls": 0,
           "conferences_held": 0
       }

   def child_init(self, rank):
       """Inicialização específica para processos filhos"""
       KSR.info('===== kamailio.child_init(%d)\n' % rank)
       return 0

   def ksr_request_route(self, msg):
       """Roteamento de mensagens SIP"""

       # Tratamento de mensagens REGISTER
       if msg.Method == "REGISTER":
           KSR.info("REGISTER R-URI: " + KSR.pv.get("$ru") + "\n")
           KSR.info("            To: " + KSR.pv.get("$tu") + " Contact:" + KSR.hdr.get("Contact") + "\n")
           if KSR.pv.get("$td") == "acme.pt":
               KSR.registrar.save('location', 0)
               self.statusInfo[KSR.pv.get("$fu")] = "Disponivel"
           else:
               KSR.sl.send_reply(403, "Forbidden")
           return 1

       # Tratamento de mensagens INVITE
       if msg.Method == "INVITE":
           KSR.info("INVITE R-URI: " + KSR.pv.get("$ru") + "\n")
           KSR.info("        From: " + KSR.pv.get("$fu") + " To: " + KSR.pv.get("$tu") + "\n")

           domain_from = KSR.pv.get("$fd")
           domain_to = KSR.pv.get("$td")

           if domain_to == "acme.pt":
               if domain_from != "acme.pt":
                   KSR.info("Forbidden - Source domain not allowed\n")
                   KSR.sl.send_reply(403, "Forbidden - No Access to Service")
                   return 1
               
               # Redirecionar chamadas para a sala d conferencias da Acme
               if KSR.pv.get("$ru") == "sip:conferencia@acme.pt":
                   KSR.info("Redirecting to ACME conference room\n")
                   KSR.pv.sets("$ru", "sip:conferencia@127.0.0.1:5090")
                   KSR.rr.record_route()
                   KSR.tm.t_relay()
                   return 1
               
               # Verifica se o destino está em conferência
               if self.statusInfo.get(KSR.pv.get("$ru")) == "Em conferencia":
                   KSR.info("Destination in conference, forwarding to conference announcement server\n")
                   KSR.pv.sets("$ru", "sip:inconference@127.0.0.1:5080")
                   KSR.rr.record_route()
                   KSR.tm.t_relay()
                   return 1

               # Encaminha para sala de conferência se tecla '0' for pressionada
               if KSR.pv.get("$avp(tecla)") == "0":
                   KSR.info("Key 0 pressed, redirecting to conference room\n")
                   KSR.pv.sets("$ru", "sip:conferencia@127.0.0.1:5090")
                   KSR.rr.record_route()
                   KSR.tm.t_relay()
                   return 1

               # Incrementa KPI de conferências realizadas
               self.kpi_data["conferences_held"] += 1
               
               # Verificar se o destino está ocupado
               if self.statusInfo[KSR.pv.get("$ru")] == "Ocupado":
                 KSR.info("Destination is busy, forwarding to busy announcement server\n")
                 KSR.pv.sets("$ru", "sip:busyann@127.0.0.1:5080")
                 KSR.rr.record_route()
                 KSR.tm.t_relay()
                 return 1

               # Verifica se destino está registrado
               if KSR.registrar.lookup("location") != 1:
                   KSR.info("Destination not registered\n")
                   KSR.sl.send_reply(404, "Not Found - Destination Not Registered")
                   return 1  

               # Encaminhamento usual
               KSR.info("Destination registered, relaying call as usual\n")
               self.statusInfo[KSR.pv.get("$fu")] = "Ocupado"
               self.statusInfo[KSR.pv.get("$ru")] = "Ocupado"
               KSR.rr.record_route()
               KSR.tm.t_relay()
               return 1

           # Encaminhamento padrão para domínios externos
           KSR.info("Destination domain not acme.pt, proceeding as usual\n")
           KSR.rr.record_route()
           KSR.tm.t_relay()
           return 1

       # Tratamento de mensagens ACK
       if msg.Method == "ACK":
           KSR.info("ACK R-URI: " + KSR.pv.get("$ru") + "\n")
           KSR.rr.loose_route()
           KSR.tm.t_relay()
           return 1

       # Tratamento de mensagens CANCEL
       if msg.Method == "CANCEL":
           KSR.info("CANCEL R-URI: " + KSR.pv.get("$ru") + "\n")
           KSR.registrar.lookup("location")
           KSR.tm.t_relay()
           return 1

       # Tratamento de mensagens BYE
       if msg.Method == "BYE":
           KSR.info("BYE R-URI: " + KSR.pv.get("$ru") + "\n")
           KSR.rr.loose_route()
           KSR.tm.t_relay()
           return 1

       # Tratamento de mensagens MESSAGE
       if msg.Method == "MESSAGE":
           KSR.info("MESSAGE R-URI: " + KSR.pv.get("$ru") + "\n")
           if (KSR.pv.get("$fu") == "sip:gestor@acme.pt" and KSR.pv.get("$rb").strip().lower() == "report"):
               if KSR.registrar.lookup("location") != 1:
                   KSR.info("Gestor not registered\n")
                   KSR.sl.send_reply(404, "Not Found - Gestor Not Registered")
                   return 1

               # Enviar relatório de KPI para o gestor
               KSR.pv.sets("$uac_req(method)", "MESSAGE")
               KSR.pv.sets("$uac_req(ruri)", KSR.pv.get("$fu"))
               kpi_report = (
                   f"Chamadas atendidas automaticamente: {self.kpi_data['auto_answered_calls']}\n"
                   f"Conferências realizadas: {self.kpi_data['conferences_held']}\n"
               )
               KSR.pv.sets("$uac_req(body)", kpi_report)
               KSR.pv.sets("$uac_req(hdrs)", "Content-Type: text/plain\r\n")
               KSR.uac.uac_req_send()
               return 1

       return 1

   def ksr_reply_route(self, msg):
       """Roteamento de respostas SIP"""
       KSR.info("===== response - from kamailio python script\n")
       KSR.info("      Status is:" + str(KSR.pv.get("$rs")) + "\n")
       return 1

   def ksr_onsend_route(self, msg):
       """Ação ao enviar mensagem SIP"""
       KSR.info("===== onsend route - from kamailio python script\n")
       return 1
   
   def ksr_onreply_route_INVITE(self, msg):
      KSR.info("===== INVITE onreply route - from kamailio python script\n")
      return 0
   
   def ksr_failure_route_INVITE(self, msg):
      KSR.info("===== INVITE failure route - from kamailio python script\n")
      return 1
